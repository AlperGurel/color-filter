<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Colorgram</title>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/topcoat/0.8.0/css/topcoat-mobile-light.min.css"
		  type="text/css"/>
	<style>
		body {
			padding: 20px 40px 40px 40px;
			margin: 0;
			font-size: 1.15rem;
			color: rgba(0, 0, 0, 0.87);
		}

		a {
			color: #308dde;
			text-decoration: none;
		}

		a:hover {
			text-decoration: underline;
		}

		h1 {
			margin-left: 20px;
			margin-top: 20px;
		}

		h1 small {
			color: rgba(0, 0, 0, 0.46);
			font-size: 74%;
			font-weight: 300;
		}

		.right {
			float: right;
			margin-right: 20px;
			margin-top: 20px;
		}

		.left {
			float: left;
		}

		.block {
			margin: 20px;
			border: 1px solid rgba(0, 0, 0, .18);
			background-color: rgba(255, 255, 255, .87);
			border-radius: 16px;
			padding: 20px 20px 20px 20px;
			min-height: 100px;
			display: -moz-inline-stack;
			display: inline-block;
			vertical-align: top;
			zoom: 1;
			*display: inline;
			_height: 100px;
			width: 340px;
			/*background-color: #fff;*/
		}

		canvas {
			display: block;
			border: 1px solid rgba(0, 0, 0, .12);
			margin-bottom: 20px;
		}

		.clear {
			clear: both;
		}

		.fnc {
			margin-top: 20px;
			max-width: 340px;
			width: 340px;
			color: rgba(0, 0, 0, .42);
		}

		.fnc.right {
			margin-right: 0;
			margin-top: 0;
		}

		#area {
			text-align: center;
			font-size: 32px;
			color: rgba(0, 0, 0, 0.36);
			border: 2px dashed rgba(0, 0, 0, 0.24);
			height: 336px;
		}

		#area div {
			padding-top: 144px;
		}

		#demo {
			font-size: 0;
		}

		#demo > * {
			font-size: 1.15rem;
		}
	</style>
</head>
<body>




<div class="clear"></div>

<div id="demo"><div class="block"><div id="area"><div>Drag &amp; drop image(s)</div></div></div></div>

<script src="socket.io-client/dist/socket.io.js"></script>
<script src="colorgram.js"></script>

<script>
	socket = io({transports: ['websocket'], upgrade: false}).connect();



	var width, height, previewHeight;
	var root = document.getElementById('demo');
	var maxColors = 16;
	width = height = 340;
	previewHeight = 40;

	var images = [
	];

	window.onload = function () {
		initDrop();
	};

	function loadImage(path, done) {
		var img = new Image();
		img.src = path;
		img.onload = function () {
			var canvas = document.createElement('canvas');
			canvas.width = width;
			canvas.height = width * (img.height / img.width);
			var ctx = canvas.getContext('2d');
			ctx.drawImage(img, 0, 0, width, canvas.height);
			var id = ctx.getImageData(0, 0, canvas.width, canvas.height);
			done({width: canvas.width, height: canvas.height, data: id.data, channels: 4, canvas: canvas});
		};
		
	}

	function statsImage(stats, proportional) {
		var pixels = Colorgram.getPixels(stats, width, proportional);
		var canvas = document.createElement('canvas');
		canvas.width = width;
		canvas.height = previewHeight;
		var ctx = canvas.getContext('2d');
		var id = ctx.getImageData(0, 0, canvas.width, canvas.height);
		var ind = 0;

		for (var h = 0; h < canvas.height; h++) {
			for (var p = 0; p < pixels.length; p++) {
				id.data[ind++] = pixels[p];
			}
		}

		ctx.putImageData(id, 0, 0, 0, 0, canvas.width, canvas.height);

		return canvas;
	}


	function code(data, root) {
		var element = document.createElement('div');
		element.className = 'fnc right';
		element.innerHTML = data;
		root.appendChild(element);
	}

	function processImage(imagePath, prepend) {
		var element = document.createElement('div');
		element.className = 'block';

		if (prepend) {
			root.insertBefore(element, root.children[1]);
		} else {
			root.appendChild(element);
		}

		loadImage(imagePath, function (img) {
			var start = new Date().getTime();
			var stats = Colorgram.extract(img);
			var modifiedStats = [[255,255,255], [0,0,0]]
			let singleImageData = {
				stats: stats
			}
			console.log(stats)
			socket.emit("singleImage", singleImageData);
			socket.on("modStats", (data) => {
				modifiedStats = data.mappedStats[0];
				// console.log(modifiedStats);
				
				var elapsed = new Date().getTime() - start;
				
				element.appendChild(img.canvas);
				element.appendChild(statsImage(stats, false));

				element.appendChild(statsImage(Colorgram.sortByHsl(stats), true));
				element.appendChild(statsImage(modifiedStats, false));
				code('Elapsed time: ' + elapsed + 'ms', element);
				});

				

		})
	}

	function initDrop() {
		var area = document.getElementById('area');
		//dragover trigger start with drag over and continues until mouse release
		area.addEventListener('dragover', function (evt) {
			evt.preventDefault();
		}, false);

		area.addEventListener('drop', function (evt) {
			console.log(evt.dataTransfer.files.length);
			const initData = {
				length: evt.dataTransfer.files.length
			}
			socket.emit("init", initData);
			//send file length and init process
			for (var i = 0; i < evt.dataTransfer.files.length; i++) {
				
				var file = evt.dataTransfer.files[i];

				if (typeof FileReader !== 'undefined' && file.type.indexOf('image') > -1) {
					var reader = new FileReader();

					reader.onload = function (evt) {
						processImage(evt.target.result, true);
					};

					(function (i, file, reader) {
						setTimeout(function () {
							reader.readAsDataURL(file);
						}, i * 15);
					})(i, file, reader);
				}
			}
			evt.preventDefault();
		}, false);
	}
</script>
</body>
</html>
